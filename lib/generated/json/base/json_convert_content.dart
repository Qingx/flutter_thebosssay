// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_boss_says/data/entity/operation_entity.dart';
import 'package:flutter_boss_says/generated/json/operation_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/user_entity.dart';
import 'package:flutter_boss_says/generated/json/user_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/token_entity.dart';
import 'package:flutter_boss_says/generated/json/token_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/boss_info_entity.dart';
import 'package:flutter_boss_says/generated/json/boss_info_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/favorite_entity.dart';
import 'package:flutter_boss_says/generated/json/favorite_entity_helper.dart';
import 'package:flutter_boss_says/test/test_boss_info_entity.dart';
import 'package:flutter_boss_says/generated/json/test_boss_info_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/guide_boss_entity.dart';
import 'package:flutter_boss_says/generated/json/guide_boss_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/boss_label_entity.dart';
import 'package:flutter_boss_says/generated/json/boss_label_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/article_entity.dart';
import 'package:flutter_boss_says/generated/json/article_entity_helper.dart';
import 'package:flutter_boss_says/data/entity/history_entity.dart';
import 'package:flutter_boss_says/generated/json/history_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case OperationEntity:
				return operationEntityFromJson(data as OperationEntity, json) as T;
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;
			case TokenEntity:
				return tokenEntityFromJson(data as TokenEntity, json) as T;
			case BossInfoEntity:
				return bossInfoEntityFromJson(data as BossInfoEntity, json) as T;
			case FavoriteEntity:
				return favoriteEntityFromJson(data as FavoriteEntity, json) as T;
			case TestBossInfoEntity:
				return testBossInfoEntityFromJson(data as TestBossInfoEntity, json) as T;
			case GuidBossEntity:
				return guidBossEntityFromJson(data as GuidBossEntity, json) as T;
			case BossLabelEntity:
				return bossLabelEntityFromJson(data as BossLabelEntity, json) as T;
			case ArticleEntity:
				return articleEntityFromJson(data as ArticleEntity, json) as T;
			case HistoryEntity:
				return historyEntityFromJson(data as HistoryEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case OperationEntity:
				return operationEntityToJson(data as OperationEntity);
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			case TokenEntity:
				return tokenEntityToJson(data as TokenEntity);
			case BossInfoEntity:
				return bossInfoEntityToJson(data as BossInfoEntity);
			case FavoriteEntity:
				return favoriteEntityToJson(data as FavoriteEntity);
			case TestBossInfoEntity:
				return testBossInfoEntityToJson(data as TestBossInfoEntity);
			case GuidBossEntity:
				return guidBossEntityToJson(data as GuidBossEntity);
			case BossLabelEntity:
				return bossLabelEntityToJson(data as BossLabelEntity);
			case ArticleEntity:
				return articleEntityToJson(data as ArticleEntity);
			case HistoryEntity:
				return historyEntityToJson(data as HistoryEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (OperationEntity).toString()){
			return OperationEntity().fromJson(json);
		}	else if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}	else if(type == (TokenEntity).toString()){
			return TokenEntity().fromJson(json);
		}	else if(type == (BossInfoEntity).toString()){
			return BossInfoEntity().fromJson(json);
		}	else if(type == (FavoriteEntity).toString()){
			return FavoriteEntity().fromJson(json);
		}	else if(type == (TestBossInfoEntity).toString()){
			return TestBossInfoEntity().fromJson(json);
		}	else if(type == (GuidBossEntity).toString()){
			return GuidBossEntity().fromJson(json);
		}	else if(type == (BossLabelEntity).toString()){
			return BossLabelEntity().fromJson(json);
		}	else if(type == (ArticleEntity).toString()){
			return ArticleEntity().fromJson(json);
		}	else if(type == (HistoryEntity).toString()){
			return HistoryEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<OperationEntity>[] is M){
			return data.map<OperationEntity>((e) => OperationEntity().fromJson(e)).toList() as M;
		}	else if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}	else if(<TokenEntity>[] is M){
			return data.map<TokenEntity>((e) => TokenEntity().fromJson(e)).toList() as M;
		}	else if(<BossInfoEntity>[] is M){
			return data.map<BossInfoEntity>((e) => BossInfoEntity().fromJson(e)).toList() as M;
		}	else if(<FavoriteEntity>[] is M){
			return data.map<FavoriteEntity>((e) => FavoriteEntity().fromJson(e)).toList() as M;
		}	else if(<TestBossInfoEntity>[] is M){
			return data.map<TestBossInfoEntity>((e) => TestBossInfoEntity().fromJson(e)).toList() as M;
		}	else if(<GuidBossEntity>[] is M){
			return data.map<GuidBossEntity>((e) => GuidBossEntity().fromJson(e)).toList() as M;
		}	else if(<BossLabelEntity>[] is M){
			return data.map<BossLabelEntity>((e) => BossLabelEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleEntity>[] is M){
			return data.map<ArticleEntity>((e) => ArticleEntity().fromJson(e)).toList() as M;
		}	else if(<HistoryEntity>[] is M){
			return data.map<HistoryEntity>((e) => HistoryEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}